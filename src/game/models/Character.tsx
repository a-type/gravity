/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useEffect, useRef } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Beta_Joints: THREE.SkinnedMesh;
    Beta_Surface: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
  };
  materials: {
    ['Beta_Joints_MAT.001']: THREE.MeshStandardMaterial;
    ['asdf1:Beta_HighLimbsGeoSG2.001']: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ActionName = 'Armature|mixamo.com|Layer0' | 'running' | 'standing_idle';
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

export default function Character({
  animation = 'standing_idle',
  ...props
}: JSX.IntrinsicElements['group'] & {
  animation?: ActionName;
}) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    '/public/animations/character.glb',
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);
  const previousActionRef = useRef<ActionName | null>(null);
  useEffect(() => {
    if (previousActionRef.current !== animation) {
      if (previousActionRef.current) {
        actions[previousActionRef.current]!.crossFadeTo(
          actions[animation]!,
          0.2,
          true,
        );
      } else {
        actions[animation]!.play();
      }
    }
    previousActionRef.current = animation;
  }, [animation, actions]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="Beta_Joints"
            geometry={nodes.Beta_Joints.geometry}
            material={materials['Beta_Joints_MAT.001']}
            skeleton={nodes.Beta_Joints.skeleton}
          />
          <skinnedMesh
            name="Beta_Surface"
            geometry={nodes.Beta_Surface.geometry}
            material={materials['asdf1:Beta_HighLimbsGeoSG2.001']}
            skeleton={nodes.Beta_Surface.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/public/animations/character.glb');
